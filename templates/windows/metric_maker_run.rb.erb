#!/usr/bin/env ruby
require 'rubygems'
require 'json'
require 'net/http'
require 'aws-sdk-cloudwatch'
require 'thread'
require 'base64'

ROOT_PATH='<%= node['metric_maker']['root'] %>'
REGION_OVERRIDE='<%= node['metric_maker']['region_override'] %>'

class MetricMaker
  def initialize
    @cwm = Aws::CloudWatch::Client.new(
      region: get_region,
      retry_limit: <%= node['metric_maker']['retries'] %>,
      retry_backoff: lambda{|c| sleep(<%= node['metric_maker']['sleep_seconds_between_retries'] %>)}
    )
  end

  def get_region
    return REGION_OVERRIDE unless REGION_OVERRIDE == ''
    Net::HTTP.get('169.254.169.254', '/latest/meta-data/placement/availability-zone').sub(/[a-z]$/, '')
  end

  def make_metrics
    # iterate over ['metrics'] a hash containing:
    #  namespace string
    #  name string
    #  dimensions array of key/values
    #  unit string
    #  publish_with_no_dimension bool
    #
    threads = []

    Dir["#{ROOT_PATH}/conf/*.json"].each do |config|
      threads << Thread.new{handle_metric_thread(config)}
      threads.each{|t| t.join}
    end
  end

  def handle_metric_thread(config)
    metric = JSON.parse(File.read(config))
    unless File.exists? "#{ROOT_PATH}/collectors/#{metric['name']}"
      puts "No collector for #{metric['name']}"
      return nil
    end

    # Run collector
    cmd = File.read("#{ROOT_PATH}/collectors/#{metric['name']}")
    encoded_cmd = Base64.strict_encode64(cmd.encode('utf-16le'))
    value = `powershell.exe -encodedCommand #{encoded_cmd}`

    params = {
      namespace: metric['namespace'],
      metric_data: [
        metric_name: metric['name'],
        timestamp: Time.now.utc,
        value: value.strip.to_f,
        unit: metric['unit']
      ]
    }

    if metric['dimensions'].count > 0
      if metric['publish_with_no_dimension']
        params[:metric_data] << params[:metric_data].first.dup
      end
      params[:metric_data].last[:dimensions] = metric['dimensions'].map{|element| {name: element.first.first, value: element.first.last} }
    end

    puts JSON.pretty_generate(params)
    @cwm.put_metric_data(params)
  end

end

mm = MetricMaker.new
mm.make_metrics
